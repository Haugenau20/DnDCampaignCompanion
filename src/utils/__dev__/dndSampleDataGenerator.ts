// src/utils/__dev__/dndSampleDataGenerator.ts

import { initializeApp } from 'firebase/app';
import { getFirestore, collection, doc, setDoc, connectFirestoreEmulator } from 'firebase/firestore';
import { getAuth, connectAuthEmulator, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';
import * as dotenv from 'dotenv';
dotenv.config();

// Initialize Firebase with emulator configuration
const initEmulatorConnection = () => {
  const firebaseConfig = {
    apiKey: process.env.REACT_APP_API_KEY,
    authDomain: process.env.REACT_APP_AUTH_DOMAIN,
    projectId: process.env.REACT_APP_PROJECT_ID,
    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,
    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,
    appId: process.env.REACT_APP_APP_ID
  };

  const app = initializeApp(firebaseConfig);
  const db = getFirestore(app);
  const auth = getAuth(app);

  // Connect to emulators
  const host = process.env.REACT_APP_EMULATOR_HOST || 'localhost';
  connectFirestoreEmulator(db, host, 8080);
  connectAuthEmulator(auth, `http://${host}:9099`);

  return { db, auth };
};

// Type definitions based on your database structure
type UserRole = 'admin' | 'member';
type LocationType = 'region' | 'city' | 'town' | 'village' | 'dungeon' | 'landmark' | 'building' | 'poi';
type LocationStatus = 'known' | 'explored' | 'visited';
type NPCStatus = 'alive' | 'deceased' | 'missing' | 'unknown';
type NPCRelationship = 'friendly' | 'neutral' | 'hostile' | 'unknown';
type QuestStatus = 'active' | 'completed' | 'failed';
type RumorStatus = 'confirmed' | 'unconfirmed' | 'false';
type SourceType = 'npc' | 'tavern' | 'notice' | 'traveler' | 'other';

// User role mapping to keep track of user IDs
interface UserData {
  email: string;
  username: string;
  id: string; // Firebase Auth UID
  role: string;
}

interface UserMapping {
  dmUid: string;
  aragornUid: string;
  gandalfUid: string;
  gimliUid: string;
  legolasUid: string;
  [key: string]: string; // For direct access by role
}

interface LocationNote {
  date: string;
  text: string;
}

interface NPCNote {
  date: string;
  text: string;
}

interface NPCConnections {
  relatedNPCs: string[];
  affiliations: string[];
  relatedQuests: string[];
}

interface QuestObjective {
  id: string;
  description: string;
  completed: boolean;
}

interface QuestLocation {
  name: string;
  description: string;
}

interface QuestNPC {
  name: string;
  description: string;
}

interface RumorNote {
  id: string;
  content: string;
  dateAdded: string;
  addedBy: string;
  addedByUsername: string;
}

// Current date utility
const now = new Date();
const formattedDate = now.toISOString();

// Create users with Firebase Auth and get their actual UIDs
const createUsers = async (auth: any) => {
  const userTemplates = [
    { email: 'dm@example.com', password: 'password123', username: 'DungeonMaster', role: 'dm' },
    { email: 'player1@example.com', password: 'password123', username: 'Aragorn', role: 'aragorn' },
    { email: 'player2@example.com', password: 'password123', username: 'Gandalf', role: 'gandalf' },
    { email: 'player3@example.com', password: 'password123', username: 'Gimli', role: 'gimli' },
    { email: 'player4@example.com', password: 'password123', username: 'Legolas', role: 'legolas' }
  ];

  console.log('Creating users...');
  const createdUsers: UserData[] = [];

  for (const template of userTemplates) {
    try {
      // Create the user in Firebase Auth
      const userCredential = await createUserWithEmailAndPassword(auth, template.email, template.password);
      
      // Get the actual UID generated by Firebase Auth
      const uid = userCredential.user.uid;
      
      // Add the user to our array with the actual UID
      createdUsers.push({
        email: template.email,
        username: template.username,
        id: uid,
        role: template.role
      });
      
      console.log(`Created user: ${template.email} with UID: ${uid}`);
    } catch (error: any) {
      if (error.code === 'auth/email-already-in-use') {
        console.log(`User already exists: ${template.email}`);
        
        // For existing users, sign in and get the UID
        try {
          const signInResult = await signInWithEmailAndPassword(auth, template.email, template.password);
          const uid = signInResult.user.uid;
          
          createdUsers.push({
            email: template.email,
            username: template.username,
            id: uid,
            role: template.role
          });
          
          console.log(`Retrieved existing user: ${template.email} with UID: ${uid}`);
        } catch (signInError) {
          console.error(`Error signing in as existing user ${template.email}:`, signInError);
          
          // Fallback - generate a placeholder UID
          const placeholderId = `placeholder-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;
          createdUsers.push({
            email: template.email,
            username: template.username,
            id: placeholderId,
            role: template.role
          });
          console.warn(`Using placeholder ID for ${template.email}: ${placeholderId}`);
        }
      } else {
        console.error(`Error creating user ${template.email}:`, error);
      }
    }
  }

  // Create a user mapping for easy access by role
  const userMapping: UserMapping = {
    dmUid: createdUsers.find(u => u.role === 'dm')?.id || '',
    aragornUid: createdUsers.find(u => u.role === 'aragorn')?.id || '',
    gandalfUid: createdUsers.find(u => u.role === 'gandalf')?.id || '',
    gimliUid: createdUsers.find(u => u.role === 'gimli')?.id || '',
    legolasUid: createdUsers.find(u => u.role === 'legolas')?.id || ''
  };

  console.log('User mapping created:', userMapping);
  return { users: createdUsers, userMapping };
};

// Create global user profiles with actual UIDs
const createUserProfiles = async (db: any, users: UserData[]) => {
  console.log('Creating global user profiles...');
  
  for (const user of users) {
    const userData = {
      email: user.email,
      groups: ['group1'],  // All users are in the same group for this sample
      lastLoginAt: formattedDate,
      createdAt: formattedDate,
      activeGroupId: 'group1'
    };
    
    await setDoc(doc(db, 'users', user.id), userData);
    console.log(`Created global profile for: ${user.username} with UID: ${user.id}`);
  }
};

// Create a group with actual creator UID
const createGroup = async (db: any, users: UserData[], userMapping: UserMapping) => {
  const groupId = 'group1';
  const groupData = {
    name: 'The Fellowship',
    description: 'A group of adventurers bound by a common quest.',
    createdAt: formattedDate,
    createdBy: userMapping.dmUid // DM created the group - using actual UID
  };
  
  await setDoc(doc(db, 'groups', groupId), groupData);
  console.log(`Created group: ${groupData.name}`);
  
  // Create group members with actual UIDs
  for (const user of users) {
    const groupUserData = {
      username: user.username,
      role: user.role === 'dm' ? 'admin' : 'member',
      joinedAt: formattedDate,
      characters: user.role === 'dm' ? [] : [`${user.username}'s Character`],
      activeCampaignId: 'campaign1',
      preferences: { theme: 'dark', notifications: true }
    };
    
    await setDoc(doc(db, 'groups', groupId, 'users', user.id), groupUserData);
    
    // Also create username document for lookup
    await setDoc(doc(db, 'groups', groupId, 'usernames', user.username.toLowerCase()), {
      userId: user.id,
      originalUsername: user.username,
      createdAt: formattedDate
    });
  }
  
  // Create registration tokens with actual UIDs
  const tokens = [
    {
      id: 'token1',
      token: 'abc123',
      createdAt: formattedDate,
      createdBy: userMapping.dmUid, // Using actual UID
      used: true,
      usedAt: formattedDate,
      usedBy: userMapping.aragornUid, // Using actual UID
      notes: 'Token for Aragorn'
    },
    {
      id: 'token2',
      token: 'def456',
      createdAt: formattedDate,
      createdBy: userMapping.dmUid, // Using actual UID
      used: true,
      usedAt: formattedDate,
      usedBy: userMapping.gandalfUid, // Using actual UID
      notes: 'Token for Gandalf'
    },
    {
      id: 'token3',
      token: 'ghi789',
      createdAt: formattedDate,
      createdBy: userMapping.dmUid, // Using actual UID
      used: false,
      notes: 'Spare token for future players'
    }
  ];
  
  for (const token of tokens) {
    await setDoc(doc(db, 'groups', groupId, 'registrationTokens', token.id), token);
  }
  
  return groupId;
};

// Create campaigns with actual creator UID
const createCampaigns = async (db: any, groupId: string, userMapping: UserMapping) => {
  const campaignsData = [
    {
      id: 'campaign1',
      name: 'The Lord of the Rings',
      description: 'A journey to destroy the One Ring and save Middle-earth from Sauron.',
      createdAt: formattedDate,
      createdBy: userMapping.dmUid, // Using actual UID
      isActive: true
    },
    {
      id: 'campaign2',
      name: 'The Hobbit',
      description: 'An unexpected journey to reclaim the lost Dwarf Kingdom of Erebor.',
      createdAt: formattedDate,
      createdBy: userMapping.dmUid, // Using actual UID
      isActive: false
    }
  ];
  
  for (const campaign of campaignsData) {
    await setDoc(doc(db, 'groups', groupId, 'campaigns', campaign.id), campaign);
    console.log(`Created campaign: ${campaign.name}`);
  }
  
  return campaignsData;
};

// Create chapters with actual UIDs
const createChapters = async (db: any, groupId: string, campaignId: string, userMapping: UserMapping) => {
  const chaptersData = [
    {
      id: 'chapter-01',
      title: 'The Fellowship of the Ring',
      content: 'It began with the forging of the Great Rings. Three were given to the Elves, immortal, wisest and fairest of all beings. Seven to the Dwarf-Lords, great miners and craftsmen of the mountain halls. And nine, nine rings were gifted to the race of Men, who above all else desire power.',
      order: 1,
      subChapters: [
        {
          id: 'subchapter1-1',
          title: 'Concerning Hobbits',
          content: 'Hobbits have been living and farming in the four Farthings of the Shire for many hundreds of years, quite content to ignore and be ignored by the world of the Big Folk.',
          order: 1
        },
        {
          id: 'subchapter1-2',
          title: 'The Shadow of the Past',
          content: 'Gandalf reveals to Frodo the true nature of the Ring that Bilbo left him, and its terrible history.',
          order: 2
        }
      ],
      lastModified: formattedDate,
      summary: 'The start of the journey to destroy the One Ring.',
      createdBy: userMapping.dmUid, // Adding UID reference
      modifiedBy: userMapping.dmUid // Adding UID reference
    },
    {
      id: 'chapter-02',
      title: 'The Two Towers',
      content: 'The Fellowship has been broken. Frodo and Sam continue their journey alone, while the remaining members pursue the orcs who captured Merry and Pippin.',
      order: 2,
      subChapters: [
        {
          id: 'subchapter2-1',
          title: 'The Riders of Rohan',
          content: 'Aragorn, Legolas, and Gimli encounter the Riders of Rohan while pursuing the orcs who captured Merry and Pippin.',
          order: 1
        }
      ],
      lastModified: formattedDate,
      summary: 'The fellowship is divided but continues to fight against the darkness.',
      createdBy: userMapping.dmUid, // Adding UID reference
      modifiedBy: userMapping.dmUid // Adding UID reference
    },
    {
      id: 'chapter-03',
      title: 'The Return of the King',
      content: 'The final confrontation between the forces of good and evil for the fate of Middle-earth.',
      order: 3,
      lastModified: formattedDate,
      summary: 'The climax of the journey to destroy the One Ring.',
      createdBy: userMapping.dmUid, // Adding UID reference
      modifiedBy: userMapping.dmUid // Adding UID reference
    }
  ];
  
  for (const chapter of chaptersData) {
    await setDoc(doc(db, 'groups', groupId, 'campaigns', campaignId, 'chapters', chapter.id), chapter);
    console.log(`Created chapter: ${chapter.title}`);
  }
  
  return chaptersData;
};

// Create locations with actual UIDs
const createLocations = async (db: any, groupId: string, campaignId: string, userMapping: UserMapping) => {
  const locationsData = [
    {
      id: 'the-shire',
      name: 'The Shire',
      type: 'region' as LocationType,
      status: 'explored' as LocationStatus,
      description: 'A peaceful region inhabited by hobbits, a small agricultural folk.',
      features: ['Green hills', 'Hobbit holes', 'The Party Tree', 'Bywater Pool'],
      connectedNPCs: ['frodo', 'bilbo'], // Frodo, Bilbo
      relatedQuests: ['the-one-ring'], // The One Ring
      notes: [
        { date: formattedDate, text: 'Home of the hobbits and starting point of the journey.' }
      ],
      tags: ['peaceful', 'farming', 'hobbits'],
      lastVisited: formattedDate,
      createdBy: userMapping.dmUid, // Using actual UID
      createdByUsername: 'DungeonMaster',
      dateAdded: formattedDate,
      modifiedBy: userMapping.dmUid, // Using actual UID
      modifiedByUsername: 'DungeonMaster',
      dateModified: formattedDate
    },
    // Other locations with similar changes...
    {
      id: 'rivendell',
      name: 'Rivendell',
      type: 'city' as LocationType,
      status: 'visited' as LocationStatus,
      description: 'An elven outpost in Middle-earth and the house of Elrond.',
      parentId: null,
      features: ['Last Homely House', 'Council chamber', 'Waterfalls', 'Elven architecture'],
      connectedNPCs: ['elrond', 'gandalf'], // Elrond, Gandalf
      relatedQuests: ['the-one-ring', 'council-of-elrond'], // The One Ring, Council of Elrond
      notes: [
        { date: formattedDate, text: 'Location of the Council where the Fellowship was formed.' }
      ],
      tags: ['elven', 'haven', 'wisdom'],
      lastVisited: formattedDate,
      createdBy: userMapping.dmUid, // Using actual UID
      createdByUsername: 'DungeonMaster',
      dateAdded: formattedDate,
      modifiedBy: userMapping.dmUid, // Using actual UID
      modifiedByUsername: 'DungeonMaster',
      dateModified: formattedDate
    },
    {
      id: 'mines-of-moria',
      name: 'Mines of Moria',
      type: 'dungeon' as LocationType,
      status: 'explored' as LocationStatus,
      description: 'An ancient underground dwarf kingdom, now infested with orcs and a Balrog.',
      parentId: null,
      features: ['Bridge of Khazad-dûm', 'Chamber of Mazarbul', 'Endless stairways', 'Cavernous halls'],
      connectedNPCs: ['gandalf', 'gimli', 'balrog'], // Gandalf, Gimli, Balrog
      relatedQuests: ['escape-from-moria'], // Escape from Moria
      notes: [
        { date: formattedDate, text: 'Gandalf fell here fighting the Balrog of Morgoth.' }
      ],
      tags: ['dangerous', 'underground', 'dwarf ruins'],
      lastVisited: formattedDate,
      createdBy: userMapping.dmUid, // Using actual UID
      createdByUsername: 'DungeonMaster',
      dateAdded: formattedDate,
      modifiedBy: userMapping.dmUid, // Using actual UID
      modifiedByUsername: 'DungeonMaster',
      dateModified: formattedDate
    },
    {
      id: 'mordor',
      name: 'Mordor',
      type: 'region' as LocationType,
      status: 'known' as LocationStatus,
      description: 'The dark land where Sauron dwells, surrounded by mountains and filled with evil creatures.',
      parentId: null,
      features: ['Mount Doom', 'Barad-dûr', 'Black Gate', 'Plateau of Gorgoroth'],
      connectedNPCs: ['sauron', 'gollum'], // Sauron, Gollum
      relatedQuests: ['destroy-the-ring'], // Destroy the Ring
      notes: [
        { date: formattedDate, text: 'The final destination for the Ring-bearer.' }
      ],
      tags: ['evil', 'volcanic', 'dangerous'],
      lastVisited: null,
      createdBy: userMapping.dmUid, // Using actual UID
      createdByUsername: 'DungeonMaster',
      dateAdded: formattedDate,
      modifiedBy: userMapping.dmUid, // Using actual UID
      modifiedByUsername: 'DungeonMaster',
      dateModified: formattedDate
    },
    {
      id: 'isengard',
      name: 'Isengard',
      type: 'landmark' as LocationType,
      status: 'known' as LocationStatus,
      description: 'The fortress of Saruman the White, with the tower of Orthanc at its center.',
      parentId: null,
      features: ['Tower of Orthanc', 'Ring of Isengard', 'Underground forges', 'Gardens'],
      connectedNPCs: ['saruman'], // Saruman
      relatedQuests: ['defeat-saruman'], // Defeat Saruman
      notes: [
        { date: formattedDate, text: 'Once a beautiful place, now corrupted by Saruman\'s evil.' }
      ],
      tags: ['fortress', 'corruption', 'wizardry'],
      lastVisited: null,
      createdBy: userMapping.dmUid, // Using actual UID
      createdByUsername: 'DungeonMaster',
      dateAdded: formattedDate,
      modifiedBy: userMapping.dmUid, // Using actual UID
      modifiedByUsername: 'DungeonMaster',
      dateModified: formattedDate
    }
  ];
  
  for (const location of locationsData) {
    await setDoc(doc(db, 'groups', groupId, 'campaigns', campaignId, 'locations', location.id), location);
    console.log(`Created location: ${location.name}`);
  }
  
  return locationsData;
};


// Create NPCs
const createNPCs = async (db: any, groupId: string, campaignId: string, userMapping: UserMapping) => {
  const npcsData = [
    {
      id: 'frodo',
      name: 'Frodo Baggins',
      title: 'Ring-bearer',
      status: 'alive' as NPCStatus,
      race: 'Hobbit',
      occupation: 'Adventurer',
      location: 'the-shire', // The Shire
      relationship: 'friendly' as NPCRelationship,
      description: 'A hobbit from the Shire chosen to bear the One Ring on the journey to Mount Doom.',
      appearance: 'Small stature with curly brown hair and bright eyes.',
      personality: 'Courageous, determined, and resilient despite his gentle nature.',
      background: 'Nephew and adopted heir of Bilbo Baggins, who found the One Ring.',
      connections: {
        relatedNPCs: ['bilbo', 'gandalf', 'gollum'], // Bilbo, Gandalf, Gollum
        affiliations: ['The Fellowship of the Ring'],
        relatedQuests: ['the-one-ring', 'destroy-the-ring'] // The One Ring, Destroy the Ring
      },
      notes: [
        { date: formattedDate, text: 'Bearer of the One Ring and central character of the quest.' }
      ],
      createdBy: userMapping.dmUid,
      createdByUsername: 'DungeonMaster',
      dateAdded: formattedDate,
      modifiedBy: userMapping.dmUid,
      modifiedByUsername: 'DungeonMaster',
      dateModified: formattedDate
    },
    {
      id: 'bilbo',
      name: 'Bilbo Baggins',
      title: 'Former Ring-bearer',
      status: 'alive' as NPCStatus,
      race: 'Hobbit',
      occupation: 'Retired Adventurer',
      location: 'rivendell', // Rivendell
      relationship: 'friendly' as NPCRelationship,
      description: 'An elderly hobbit who found the One Ring and kept it for many years before passing it to Frodo.',
      appearance: 'Elderly hobbit with white hair, showing signs of unnaturally slow aging.',
      personality: 'Whimsical, adventurous, but increasingly possessive of the Ring before giving it up.',
      background: 'Former adventurer who journeyed to the Lonely Mountain with dwarves.',
      connections: {
        relatedNPCs: ['frodo', 'gandalf'], // Frodo, Gandalf
        affiliations: ['The Shire', 'Rivendell'],
        relatedQuests: ['the-one-ring'] // The One Ring
      },
      notes: [
        { date: formattedDate, text: 'Found the One Ring in Gollum\'s cave during his adventure with the dwarves.' }
      ],
      createdBy: userMapping.dmUid,
      createdByUsername: 'DungeonMaster',
      dateAdded: formattedDate,
      modifiedBy: userMapping.dmUid,
      modifiedByUsername: 'DungeonMaster',
      dateModified: formattedDate
    },
    {
      id: 'elrond',
      name: 'Elrond',
      title: 'Lord of Rivendell',
      status: 'alive' as NPCStatus,
      race: 'Half-elven',
      occupation: 'Ruler, Healer, Loremaster',
      location: 'rivendell', // Rivendell
      relationship: 'friendly' as NPCRelationship,
      description: 'Ancient half-elven lord of Rivendell and keeper of one of the three elven rings.',
      appearance: 'Tall with long dark hair, ageless face, and eyes that reflect his ancient wisdom.',
      personality: 'Wise, serious, and deeply concerned about the fate of Middle-earth.',
      background: 'Son of Eärendil, brother of Elros (first king of Númenor), fought in the Last Alliance against Sauron.',
      connections: {
        relatedNPCs: ['gandalf'], // Gandalf
        affiliations: ['Rivendell', 'White Council'],
        relatedQuests: ['council-of-elrond'] // Council of Elrond
      },
      notes: [
        { date: formattedDate, text: 'Hosted the Council that decided the fate of the One Ring.' }
      ],
      createdBy: userMapping.dmUid,
      createdByUsername: 'DungeonMaster',
      dateAdded: formattedDate,
      modifiedBy: userMapping.dmUid,
      modifiedByUsername: 'DungeonMaster',
      dateModified: formattedDate
    },
    {
      id: 'gandalf',
      name: 'Gandalf',
      title: 'The Grey (later The White)',
      status: 'alive' as NPCStatus,
      race: 'Maia (Wizard)',
      occupation: 'Wizard, Advisor',
      location: 'mines-of-moria', // Mines of Moria (last seen)
      relationship: 'friendly' as NPCRelationship,
      description: 'A wise and powerful wizard sent to Middle-earth to oppose Sauron.',
      appearance: 'Elderly man with long grey beard and hair, penetrating eyes, and a tall pointed hat.',
      personality: 'Wise, occasionally short-tempered, but kind-hearted and deeply caring.',
      background: 'One of the five wizards sent to Middle-earth, secretly a Maia spirit.',
      connections: {
        relatedNPCs: ['frodo', 'bilbo', 'elrond', 'saruman', 'balrog'], // Frodo, Bilbo, Elrond, Saruman, Balrog
        affiliations: ['The Fellowship of the Ring', 'White Council'],
        relatedQuests: ['the-one-ring', 'council-of-elrond', 'escape-from-moria'] // The One Ring, Council of Elrond, Escape from Moria
      },
      notes: [
        { date: formattedDate, text: 'Fell in battle with the Balrog but will return transformed.' }
      ],
      createdBy: userMapping.dmUid,
      createdByUsername: 'DungeonMaster',
      dateAdded: formattedDate,
      modifiedBy: userMapping.dmUid,
      modifiedByUsername: 'DungeonMaster',
      dateModified: formattedDate
    },
    {
      id: 'gimli',
      name: 'Gimli',
      title: 'Son of Glóin',
      status: 'alive' as NPCStatus,
      race: 'Dwarf',
      occupation: 'Warrior',
      location: 'mines-of-moria', // Mines of Moria
      relationship: 'friendly' as NPCRelationship,
      description: 'A brave dwarf warrior and member of the Fellowship of the Ring.',
      appearance: 'Stout with a long red beard, carrying a battle axe and wearing dwarf mail.',
      personality: 'Proud, loyal, stubborn, with a hearty laugh and fierce courage.',
      background: 'Son of Glóin, one of Bilbo\'s companions on the journey to Erebor.',
      connections: {
        relatedNPCs: [],
        affiliations: ['The Fellowship of the Ring', 'Erebor'],
        relatedQuests: ['council-of-elrond', 'escape-from-moria'] // Council of Elrond, Escape from Moria
      },
      notes: [
        { date: formattedDate, text: 'Became a close friend of Legolas, breaking the traditional enmity between dwarves and elves.' }
      ],
      createdBy: userMapping.dmUid,
      createdByUsername: 'DungeonMaster',
      dateAdded: formattedDate,
      modifiedBy: userMapping.dmUid,
      modifiedByUsername: 'DungeonMaster',
      dateModified: formattedDate
    },
    {
      id: 'saruman',
      name: 'Saruman',
      title: 'The White',
      status: 'alive' as NPCStatus,
      race: 'Maia (Wizard)',
      occupation: 'Wizard, Betrayer',
      location: 'isengard', // Isengard
      relationship: 'hostile' as NPCRelationship,
      description: 'Once the head of the White Council, now corrupted and allied with Sauron.',
      appearance: 'Tall, elderly man with white hair and beard, wearing white robes.',
      personality: 'Proud, manipulative, power-hungry, with a persuasive voice.',
      background: 'Leader of the wizards who fell to corruption through his studies of the enemy.',
      connections: {
        relatedNPCs: ['gandalf', 'sauron'], // Gandalf, Sauron
        affiliations: ['Isengard', 'Former White Council'],
        relatedQuests: ['defeat-saruman'] // Defeat Saruman
      },
      notes: [
        { date: formattedDate, text: 'Building an army of Uruk-hai to serve his and Sauron\'s purposes.' }
      ],
      createdBy: userMapping.dmUid,
      createdByUsername: 'DungeonMaster',
      dateAdded: formattedDate,
      modifiedBy: userMapping.dmUid,
      modifiedByUsername: 'DungeonMaster',
      dateModified: formattedDate
    },
    {
      id: 'balrog',
      name: 'Balrog of Morgoth',
      title: 'Durin\'s Bane',
      status: 'alive' as NPCStatus,
      race: 'Balrog (Demon)',
      occupation: 'Ancient Evil',
      location: 'mines-of-moria', // Mines of Moria
      relationship: 'hostile' as NPCRelationship,
      description: 'An ancient demon of shadow and flame awakened by the dwarves of Moria.',
      appearance: 'Massive creature of shadow and flame with burning eyes and a fiery whip.',
      personality: 'Malevolent, destructive, and filled with ancient hatred.',
      background: 'A servant of Morgoth from the First Age who hid in the depths of the earth after his master\'s defeat.',
      connections: {
        relatedNPCs: ['gandalf'], // Gandalf
        affiliations: ['Servants of Morgoth'],
        relatedQuests: ['escape-from-moria'] // Escape from Moria
      },
      notes: [
        { date: formattedDate, text: 'Fought Gandalf on the Bridge of Khazad-dûm, causing both to fall into the abyss.' }
      ],
      createdBy: userMapping.dmUid,
      createdByUsername: 'DungeonMaster',
      dateAdded: formattedDate,
      modifiedBy: userMapping.dmUid,
      modifiedByUsername: 'DungeonMaster',
      dateModified: formattedDate
    },
    {
      id: 'sauron',
      name: 'Sauron',
      title: 'The Dark Lord',
      status: 'alive' as NPCStatus,
      race: 'Maia',
      occupation: 'Dark Lord',
      location: 'mordor', // Mordor
      relationship: 'hostile' as NPCRelationship,
      description: 'The creator of the One Ring and the primary antagonist seeking to dominate Middle-earth.',
      appearance: 'Currently exists as a lidless eye wreathed in flame atop Barad-dûr.',
      personality: 'Domineering, manipulative, patient, and utterly evil.',
      background: 'Once a servant of Morgoth, rose to power in the Second Age and created the Rings of Power.',
      connections: {
        relatedNPCs: ['saruman', 'gollum'], // Saruman, Gollum
        affiliations: ['Mordor', 'Forces of Darkness'],
        relatedQuests: ['the-one-ring', 'destroy-the-ring'] // The One Ring, Destroy the Ring
      },
      notes: [
        { date: formattedDate, text: 'His power and fate are bound to the One Ring.' }
      ],
      createdBy: userMapping.dmUid,
      createdByUsername: 'DungeonMaster',
      dateAdded: formattedDate,
      modifiedBy: userMapping.dmUid,
      modifiedByUsername: 'DungeonMaster',
      dateModified: formattedDate
    },
    {
      id: 'gollum',
      name: 'Gollum/Sméagol',
      title: 'Former Ring-bearer',
      status: 'alive' as NPCStatus,
      race: 'Hobbit (Corrupted)',
      occupation: 'Ring-seeker',
      location: 'mordor', // Mordor (heading there)
      relationship: 'neutral' as NPCRelationship,
      description: 'A pitiful creature corrupted by the One Ring, which he possessed for centuries.',
      appearance: 'Emaciated, pale, with large luminous eyes and little hair.',
      personality: 'Split personality—Gollum is malicious and obsessed, while Sméagol shows glimpses of his former self.',
      background: 'Once a Stoor hobbit named Sméagol who found the Ring and was corrupted by it over centuries.',
      connections: {
        relatedNPCs: ['frodo', 'sauron'], // Frodo, Sauron
        affiliations: ['None'],
        relatedQuests: ['the-one-ring', 'destroy-the-ring'] // The One Ring, Destroy the Ring
      },
      notes: [
        { date: formattedDate, text: 'Follows the Ring-bearer out of obsession with "his precious."' }
      ],
      createdBy: userMapping.dmUid,
      createdByUsername: 'DungeonMaster',
      dateAdded: formattedDate,
      modifiedBy: userMapping.dmUid,
      modifiedByUsername: 'DungeonMaster',
      dateModified: formattedDate
    }
  ];
  
  for (const npc of npcsData) {
    await setDoc(doc(db, 'groups', groupId, 'campaigns', campaignId, 'npcs', npc.id), npc);
    console.log(`Created NPC: ${npc.name}`);
  }
  
  return npcsData;
};

// Create quests
const createQuests = async (db: any, groupId: string, campaignId: string, userMapping: UserMapping) => {
  const questsData = [
    {
      id: 'the-one-ring',
      title: 'The One Ring',
      description: 'Discover the true nature of Bilbo\'s ring and determine what must be done with it.',
      status: 'completed' as QuestStatus,
      background: 'Bilbo Baggins found a mysterious ring during his adventure with the dwarves, which has been identified as the One Ring of Sauron.',
      objectives: [
        {
          id: 'obj1-1',
          description: 'Consult with Gandalf about the ring\'s nature',
          completed: true
        },
        {
          id: 'obj1-2',
          description: 'Test the ring in fire to reveal its inscription',
          completed: true
        },
        {
          id: 'obj1-3',
          description: 'Keep the ring safe from the Nazgûl',
          completed: true
        }
      ],
      leads: ['The ring must be taken to the Council at Rivendell'],
      keyLocations: [
        { name: 'The Shire', description: 'Where the ring has been kept hidden for decades' },
        { name: 'Rivendell', description: 'Where the Council will decide the ring\'s fate' }
      ],
      importantNPCs: [
        { name: 'Gandalf', description: 'Has knowledge of the ring\'s history' },
        { name: 'Frodo Baggins', description: 'The new ring-bearer' },
        { name: 'Bilbo Baggins', description: 'The former ring-bearer' }
      ],
      relatedNPCIds: ['frodo', 'bilbo', 'gandalf'],
      complications: ['The Nazgûl are hunting for the ring', 'The ring corrupts its bearer over time'],
      rewards: ['Knowledge of the ring\'s true nature', 'Understanding the threat to Middle-earth'],
      location: 'the-shire',
      levelRange: '1-3',
      dateAdded: formattedDate,
      dateCompleted: formattedDate,
      createdBy: userMapping.dmUid,
      createdByUsername: 'DungeonMaster',
      dateModified: formattedDate,
      modifiedBy: userMapping.dmUid,
      modifiedByUsername: 'DungeonMaster'
    },
    {
      id: 'council-of-elrond',
      title: 'Council of Elrond',
      description: 'Attend the Council of Elrond to determine the fate of the One Ring.',
      status: 'completed' as QuestStatus,
      background: 'With the One Ring identified, a council of the free peoples of Middle-earth must decide what to do with it.',
      objectives: [
        {
          id: 'obj2-1',
          description: 'Reach Rivendell safely',
          completed: true
        },
        {
          id: 'obj2-2',
          description: 'Present the Ring at the Council',
          completed: true
        },
        {
          id: 'obj2-3',
          description: 'Form a plan to deal with the Ring',
          completed: true
        }
      ],
      leads: ['The Ring must be destroyed in the fires of Mount Doom'],
      keyLocations: [
        { name: 'Rivendell', description: 'The location of the Council' },
        { name: 'Mordor', description: 'The only place where the Ring can be destroyed' }
      ],
      importantNPCs: [
        { name: 'Elrond', description: 'Host of the Council' },
        { name: 'Gandalf', description: 'Advisor and guide' },
        { name: 'Frodo Baggins', description: 'The Ring-bearer' }
      ],
      relatedNPCIds: ['frodo', 'elrond', 'gandalf', 'gimli'],
      complications: ['Disagreements between races', 'The corruption of the Ring affects the Council'],
      rewards: ['Formation of the Fellowship of the Ring', 'A plan to destroy the Ring'],
      location: 'rivendell',
      levelRange: '3-5',
      dateAdded: formattedDate,
      dateCompleted: formattedDate,
      createdBy: userMapping.dmUid,
      createdByUsername: 'DungeonMaster',
      dateModified: formattedDate,
      modifiedBy: userMapping.dmUid,
      modifiedByUsername: 'DungeonMaster'
    },
    {
      id: 'escape-from-moria',
      title: 'Escape from Moria',
      description: 'Navigate through the ancient dwarf kingdom of Moria and escape the dangers within.',
      status: 'completed' as QuestStatus,
      background: 'The Fellowship must pass through Moria after being unable to cross the mountains via the Redhorn Pass.',
      objectives: [
        {
          id: 'obj3-1',
          description: 'Find the entrance to Moria',
          completed: true
        },
        {
          id: 'obj3-2',
          description: 'Navigate through the mines',
          completed: true
        },
        {
          id: 'obj3-3',
          description: 'Escape from the Balrog and orcs',
          completed: true
        }
      ],
      leads: ['Continue the journey to Mordor'],
      keyLocations: [
        { name: 'Doors of Durin', description: 'The western entrance to Moria' },
        { name: 'Bridge of Khazad-dûm', description: 'Where Gandalf confronts the Balrog' }
      ],
      importantNPCs: [
        { name: 'Gandalf', description: 'Guide through the mines' },
        { name: 'Gimli', description: 'Dwarf with knowledge of Moria\'s history' },
        { name: 'Balrog', description: 'Ancient demon awakened in the depths' }
      ],
      relatedNPCIds: ['gandalf', 'gimli', 'balrog'],
      complications: ['Cave-in blocking the western entrance', 'Orcs and trolls patrolling the mines', 'The Balrog\'s awakening'],
      rewards: ['Passage through the mountains', 'Discovery of the fate of Balin\'s expedition'],
      location: 'mines-of-moria',
      levelRange: '5-7',
      dateAdded: formattedDate,
      dateCompleted: formattedDate,
      createdBy: userMapping.dmUid,
      createdByUsername: 'DungeonMaster',
      dateModified: formattedDate,
      modifiedBy: userMapping.dmUid,
      modifiedByUsername: 'DungeonMaster'
    },
    {
      id: 'destroy-the-ring',
      title: 'Destroy the Ring',
      description: 'Journey to Mount Doom in Mordor to destroy the One Ring in the fires where it was forged.',
      status: 'active' as QuestStatus,
      background: 'The One Ring can only be destroyed in the fires of Mount Doom, where it was created by Sauron.',
      objectives: [
        {
          id: 'obj4-1',
          description: 'Reach Mordor undetected',
          completed: false
        },
        {
          id: 'obj4-2',
          description: 'Find a path to Mount Doom',
          completed: false
        },
        {
          id: 'obj4-3',
          description: 'Cast the Ring into the fire',
          completed: false
        }
      ],
      leads: ['Gollum may know a secret way into Mordor'],
      keyLocations: [
        { name: 'Mordor', description: 'The dark land ruled by Sauron' },
        { name: 'Mount Doom', description: 'The volcano where the Ring must be destroyed' }
      ],
      importantNPCs: [
        { name: 'Frodo Baggins', description: 'The Ring-bearer' },
        { name: 'Gollum', description: 'Guide with knowledge of secret paths' },
        { name: 'Sauron', description: 'The Dark Lord who seeks the Ring' }
      ],
      relatedNPCIds: ['frodo', 'sauron', 'gollum'],
      complications: ['The Ring\'s corruption grows stronger near Mordor', 'Sauron\'s forces patrol the land', 'Gollum\'s trustworthiness is questionable'],
      rewards: ['The destruction of the One Ring', 'The downfall of Sauron', 'Freedom for Middle-earth'],
      location: 'mordor',
      levelRange: '8-10',
      dateAdded: formattedDate,
      dateCompleted: null,
      createdBy: userMapping.dmUid,
      createdByUsername: 'DungeonMaster',
      dateModified: formattedDate,
      modifiedBy: userMapping.dmUid,
      modifiedByUsername: 'DungeonMaster'
    },
    {
      id: 'defeat-saruman',
      title: 'Defeat Saruman',
      description: 'Confront the traitorous wizard Saruman and end his alliance with Sauron.',
      status: 'active' as QuestStatus,
      background: 'Saruman the White has betrayed the free peoples and allied with Sauron, building an army at Isengard.',
      objectives: [
        {
          id: 'obj5-1',
          description: 'Gather intelligence on Saruman\'s forces',
          completed: true
        },
        {
          id: 'obj5-2',
          description: 'Rally the Rohirrim to fight against Isengard',
          completed: false
        },
        {
          id: 'obj5-3',
          description: 'Defeat Saruman\'s army and confront the wizard',
          completed: false
        }
      ],
      leads: ['The Ents of Fangorn Forest might be persuaded to help'],
      keyLocations: [
        { name: 'Isengard', description: 'Saruman\'s fortress and base of operations' },
        { name: 'Orthanc', description: 'The tower at the center of Isengard where Saruman resides' }
      ],
      importantNPCs: [
        { name: 'Saruman', description: 'The traitorous wizard' },
        { name: 'Gandalf', description: 'Now returned as Gandalf the White' }
      ],
      relatedNPCIds: ['gandalf', 'saruman'],
      complications: ['Saruman\'s voice is unnaturally persuasive', 'The Uruk-hai are stronger than ordinary orcs'],
      rewards: ['Weakening of Sauron\'s alliance', 'Recovery of lost knowledge from Orthanc'],
      location: 'isengard',
      levelRange: '6-8',
      dateAdded: formattedDate,
      dateCompleted: null,
      createdBy: userMapping.dmUid,
      createdByUsername: 'DungeonMaster',
      dateModified: formattedDate,
      modifiedBy: userMapping.dmUid,
      modifiedByUsername: 'DungeonMaster'
    }
  ];
  
  for (const quest of questsData) {
    await setDoc(doc(db, 'groups', groupId, 'campaigns', campaignId, 'quests', quest.id), quest);
    console.log(`Created quest: ${quest.title}`);
  }
  
  return questsData;
};

// Create rumors
const createRumors = async (db: any, groupId: string, campaignId: string, userMapping: UserMapping) => {
  const rumorsData = [
    {
      id: 'strange-visitors-to-the-shire',
      title: 'Strange Visitors to the Shire',
      content: 'Black-cloaked riders have been seen asking about "Baggins" throughout the Shire.',
      status: 'confirmed' as RumorStatus,
      sourceType: 'npc' as SourceType,
      sourceName: 'Gaffer Gamgee',
      sourceNpcId: null,
      location: 'The Shire',
      locationId: 'the-shire',
      dateAdded: formattedDate,
      dateModified: formattedDate,
      createdBy: userMapping.aragornUid,
      createdByUsername: 'Aragorn',
      modifiedBy: userMapping.aragornUid,
      modifiedByUsername: 'Aragorn',
      relatedNPCs: ['frodo', 'bilbo'],
      relatedLocations: ['the-shire'],
      notes: [
        {
          id: 'note1-1',
          content: 'These are likely the Nazgûl hunting for the Ring.',
          dateAdded: formattedDate,
          addedBy: userMapping.aragornUid,
          addedByUsername: 'Aragorn'
        }
      ]
    },
    {
      id: 'the-enemys-forces-are-growing',
      title: 'The Enemy\'s Forces are Growing',
      content: 'Mordor has been gathering armies. Orcs, trolls, and men from the East and South have answered Sauron\'s call.',
      status: 'unconfirmed' as RumorStatus,
      sourceType: 'traveler' as SourceType,
      sourceName: 'Ranger from the East',
      sourceNpcId: null,
      location: 'Rivendell',
      locationId: 'rivendell',
      dateAdded: formattedDate,
      dateModified: formattedDate,
      createdBy: userMapping.gandalfUid,
      createdByUsername: 'Gandalf',
      modifiedBy: userMapping.gandalfUid,
      modifiedByUsername: 'Gandalf',
      relatedNPCs: ['sauron'],
      relatedLocations: ['mordor'],
      notes: [
        {
          id: 'note2-1',
          content: 'This aligns with Gandalf\'s intelligence from his journeys.',
          dateAdded: formattedDate,
          addedBy: userMapping.gandalfUid,
          addedByUsername: 'Gandalf'
        }
      ]
    },
    {
      id: 'dwarves-in-moria',
      title: 'Dwarves in Moria',
      content: 'A dwarf expedition led by Balin attempted to reclaim Moria years ago, but no word has come from them in a long time.',
      status: 'unconfirmed' as RumorStatus,
      sourceType: 'npc' as SourceType,
      sourceName: 'Glóin',
      sourceNpcId: null,
      location: 'Rivendell',
      locationId: 'rivendell',
      dateAdded: formattedDate,
      dateModified: formattedDate,
      createdBy: userMapping.gimliUid,
      createdByUsername: 'Gimli',
      modifiedBy: userMapping.gimliUid,
      modifiedByUsername: 'Gimli',
      relatedNPCs: ['gimli'],
      relatedLocations: ['mines-of-moria'],
      notes: [
        {
          id: 'note3-1',
          content: 'Gimli is particularly interested in discovering their fate.',
          dateAdded: formattedDate,
          addedBy: userMapping.gimliUid,
          addedByUsername: 'Gimli'
        }
      ]
    },
    {
      id: 'the-white-wizards-betrayal',
      title: 'The White Wizard\'s Betrayal',
      content: 'Saruman has turned to the shadow and is no longer an ally of the free peoples.',
      status: 'confirmed' as RumorStatus,
      sourceType: 'npc' as SourceType,
      sourceName: 'Gandalf',
      sourceNpcId: 'gandalf',
      location: 'Rivendell',
      locationId: 'rivendell',
      dateAdded: formattedDate,
      dateModified: formattedDate,
      createdBy: userMapping.gandalfUid,
      createdByUsername: 'Gandalf',
      modifiedBy: userMapping.gandalfUid,
      modifiedByUsername: 'Gandalf',
      relatedNPCs: ['gandalf', 'saruman'],
      relatedLocations: ['isengard'],
      notes: [
        {
          id: 'note4-1',
          content: 'Gandalf was imprisoned at Orthanc but escaped with the help of an eagle.',
          dateAdded: formattedDate,
          addedBy: userMapping.gandalfUid,
          addedByUsername: 'Gandalf'
        }
      ],
      convertedToQuestId: 'defeat-saruman'
    },
    {
      id: 'a-secret-path-into-mordor',
      title: 'A Secret Path into Mordor',
      content: 'There may be a path into Mordor that is not watched by the Eye.',
      status: 'unconfirmed' as RumorStatus,
      sourceType: 'other' as SourceType,
      sourceName: 'Ancient Maps',
      sourceNpcId: null,
      location: 'Rivendell',
      locationId: 'rivendell',
      dateAdded: formattedDate,
      dateModified: formattedDate,
      createdBy: userMapping.aragornUid,
      createdByUsername: 'Aragorn',
      modifiedBy: userMapping.aragornUid,
      modifiedByUsername: 'Aragorn',
      relatedNPCs: ['gollum'],
      relatedLocations: ['mordor'],
      notes: [
        {
          id: 'note5-1',
          content: 'Gollum might have knowledge of this path, as he escaped from Mordor.',
          dateAdded: formattedDate,
          addedBy: userMapping.aragornUid,
          addedByUsername: 'Aragorn'
        }
      ]
    }
  ];
  
  for (const rumor of rumorsData) {
    await setDoc(doc(db, 'groups', groupId, 'campaigns', campaignId, 'rumors', rumor.id), rumor);
    console.log(`Created rumor: ${rumor.title}`);
  }
  
  return rumorsData;
};

// Create saga
const createSaga = async (db: any, groupId: string, campaignId: string) => {
  const sagaData = {
    id: 'sagaData',
    title: 'The War of the Ring',
    content: 'The epic story of the Fellowship\'s quest to destroy the One Ring and save Middle-earth from the darkness of Sauron.',
    lastUpdated: formattedDate,
    version: '1.0'
  };
  
  await setDoc(doc(db, 'groups', groupId, 'campaigns', campaignId, 'saga', sagaData.id), sagaData);
  console.log(`Created saga: ${sagaData.title}`);
  
  return sagaData;
};

// Main function to generate sample data
export const generateSampleData = async () => {
  console.log('Starting sample data generation for D&D Campaign Companion...');
  
  try {
    const { db, auth } = initEmulatorConnection();
    
    // Create sample data in sequence
    const { users, userMapping } = await createUsers(auth);
    await createUserProfiles(db, users);
    const groupId = await createGroup(db, users, userMapping);
    const campaigns = await createCampaigns(db, groupId, userMapping);
    const campaignId = campaigns[0].id; // Use the active campaign
    
    await createChapters(db, groupId, campaignId, userMapping);
    await createLocations(db, groupId, campaignId, userMapping);
    await createNPCs(db, groupId, campaignId, userMapping);
    await createQuests(db, groupId, campaignId, userMapping);
    await createRumors(db, groupId, campaignId, userMapping);
    await createSaga(db, groupId, campaignId);
    
    console.log('Sample data generation complete!');
  } catch (error) {
    console.error('Error generating sample data:', error);
  }
};

// Run the generator when called directly
if (require.main === module) {
  generateSampleData();
}