// src/utils/__dev__/generators/userGenerator.ts

import { User } from 'firebase/auth';
import { doc, setDoc } from 'firebase/firestore';
import { createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';

// User data types
export interface UserData {
  email: string;
  username: string;
  id: string; // Firebase Auth UID
  role: string;
}

export interface UserMapping {
  [key: string]: string; // For direct access by role/username
}

// Create 8 users with Firebase Auth and get their actual UIDs
export const createSampleUsers = async (auth: any) => {
  const userTemplates = [
    // Users 1-5 (in group 1)
    { email: 'dm@example.com', password: 'password123', username: 'DungeonMaster', role: 'dm' },          // User 1 (in both groups as admin)
    { email: 'player1@example.com', password: 'password123', username: 'Aragorn', role: 'aragorn' },      // User 2 (in both groups as member)
    { email: 'player2@example.com', password: 'password123', username: 'Gandalf', role: 'gandalf' },      // User 3 (only in group 1)
    { email: 'player3@example.com', password: 'password123', username: 'Gimli', role: 'gimli' },          // User 4 (only in group 1)
    { email: 'player4@example.com', password: 'password123', username: 'Legolas', role: 'legolas' },      // User 5 (only in group 1)
    
    // Users 6-8 (only in group 2)
    { email: 'player5@example.com', password: 'password123', username: 'Frodo', role: 'frodo' },          // User 6 (only in group 2)
    { email: 'player6@example.com', password: 'password123', username: 'Samwise', role: 'samwise' },      // User 7 (only in group 2)
    { email: 'player7@example.com', password: 'password123', username: 'Pippin', role: 'pippin' }         // User 8 (only in group 2)
  ];

  console.log('Creating users...');
  const createdUsers: UserData[] = [];

  for (const template of userTemplates) {
    try {
      // Create the user in Firebase Auth
      const userCredential = await createUserWithEmailAndPassword(auth, template.email, template.password);
      
      // Get the actual UID generated by Firebase Auth
      const uid = userCredential.user.uid;
      
      // Add the user to our array with the actual UID
      createdUsers.push({
        email: template.email,
        username: template.username,
        id: uid,
        role: template.role
      });
      
      console.log(`Created user: ${template.email} with UID: ${uid}`);
    } catch (error: any) {
      if (error.code === 'auth/email-already-in-use') {
        console.log(`User already exists: ${template.email}`);
        
        // For existing users, sign in and get the UID
        try {
          const signInResult = await signInWithEmailAndPassword(auth, template.email, template.password);
          const uid = signInResult.user.uid;
          
          createdUsers.push({
            email: template.email,
            username: template.username,
            id: uid,
            role: template.role
          });
          
          console.log(`Retrieved existing user: ${template.email} with UID: ${uid}`);
        } catch (signInError) {
          console.error(`Error signing in as existing user ${template.email}:`, signInError);
          
          // Fallback - generate a placeholder UID
          const placeholderId = `placeholder-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;
          createdUsers.push({
            email: template.email,
            username: template.username,
            id: placeholderId,
            role: template.role
          });
          console.warn(`Using placeholder ID for ${template.email}: ${placeholderId}`);
        }
      } else {
        console.error(`Error creating user ${template.email}:`, error);
      }
    }
  }

  // Create a user mapping for easy access by role and username
  const userMapping: UserMapping = {};
  
  createdUsers.forEach(user => {
    userMapping[user.role] = user.id;
    userMapping[user.username] = user.id;
  });

  console.log('User mapping created:', userMapping);
  return { users: createdUsers, userMapping };
};

// Create global user profiles with actual UIDs
export const createUserProfiles = async (db: any, users: UserData[]) => {
  console.log('Creating global user profiles...');
  
  for (const user of users) {
    // Determine which groups the user belongs to
    let groups = [];
    
    if (user.username === 'DungeonMaster' || user.username === 'Aragorn') {
      // Users 1-2 are in both groups
      groups = ['group1', 'group2'];
    } else if (['Gandalf', 'Gimli', 'Legolas'].includes(user.username)) {
      // Users 3-5 are only in group 1
      groups = ['group1'];
    } else {
      // Users 6-8 (Frodo, Samwise, Pippin) are only in group 2
      groups = ['group2'];
    }
    
    const userData = {
      email: user.email,
      groups: groups,
      lastLoginAt: new Date().toISOString(),
      createdAt: new Date().toISOString(),
      activeGroupId: groups[0] // Set first group as active
    };
    
    await setDoc(doc(db, 'users', user.id), userData);
    console.log(`Created global profile for: ${user.username} with UID: ${user.id} in groups: ${groups.join(', ')}`);
  }
};