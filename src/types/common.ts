// src/types/common.ts

/**
 * System metadata that is automatically managed by contexts
 * Forms should NEVER handle this data - it's added by contexts only
 */
export interface SystemMetadata {
  /** User ID who created the item */
  createdBy: string;
  /** Username who created the item */
  createdByUsername: string;
  /** Character ID active when item was created */
  createdByCharacterId?: string | null;
  /** Character name active when item was created */
  createdByCharacterName?: string | null;
  /** Date item was created */
  createdAt: string;
  
  /** User ID who last modified the item */
  modifiedBy: string;
  /** Username who last modified the item */
  modifiedByUsername: string;
  /** Character ID active when item was modified */
  modifiedByCharacterId?: string | null;
  /** Character name active when item was modified */
  modifiedByCharacterName?: string | null;
  /** Date item was last modified */
  modifiedAt: string;

  // Legacy field names for compatibility during Phase 4 database alignment
  /** @deprecated Use createdAt instead - legacy field for compatibility */
  dateAdded: string; // Make required for legacy compatibility
  /** @deprecated Use modifiedAt instead - legacy field for compatibility */
  dateModified: string; // Make required for legacy compatibility
  /** @deprecated Use modifiedAt instead - legacy field for compatibility */
  lastUpdated?: string;
  /** @deprecated Use modifiedAt instead - legacy field for compatibility */
  updatedAt: string; // Make required for legacy compatibility
}

/**
 * Base interface for all entities with system metadata
 */
export interface BaseEntity {
  /** Unique identifier - generated by contexts */
  id: string;
}

/**
 * Complete entity with all system metadata
 * This is what contexts store and manage
 */
export type Entity<T = Record<string, any>> = BaseEntity & SystemMetadata & T;

/**
 * Clean domain data that forms submit to contexts
 * This excludes all system metadata and IDs
 */
export type DomainData<T> = Omit<T, keyof BaseEntity | keyof SystemMetadata>;

/**
 * Standard context state structure for all entity types
 */
export interface EntityContextState<T> {
  /** Array of entities */
  items: T[];
  /** Loading state */
  isLoading: boolean;
  /** Error message if any */
  error: string | null;
}

/**
 * Standard context methods that all entity contexts must implement
 */
export interface EntityContextMethods<T, D = DomainData<T>> {
  /** Create a new entity from clean domain data */
  create: (data: D) => Promise<T>;
  /** Update an entity with clean domain data */
  update: (id: string, data: D) => Promise<T>;
  /** Delete an entity */
  delete: (id: string) => Promise<void>;
  /** Get entity by ID */
  getById: (id: string) => T | undefined;
  /** Refresh entities from backend */
  refresh: () => Promise<void>;
}

/**
 * Complete context value combining state and methods
 */
export interface EntityContextValue<T, D = DomainData<T>> 
  extends EntityContextState<T>, EntityContextMethods<T, D> {}